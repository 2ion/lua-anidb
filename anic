#!/usr/bin/env lua

local anidb = require 'api.http'
local posix = require 'posix'

-- Default options

local search_min_word_count = -1
local search_fulltext_thresold = -1
local search_fulltext_function = "startswith"
local pretty_language = "en"
local debug = false
local print_mode = "pretty"
local print_property = "none"

local search_terms = {}

local function printf(...)
  print(string.format(...))
end

local function log(...)
  if debug then printf(...) end
end


for o, optarg, opterr in posix.getopt(arg, "a:hs:W:T:M:L:Duip:", {
  { "help",               "none",     'h' },
  { "aid",                "required", 'a' },
  { "search",             "required", 's' },
  { "word-count",         "required", 'W' },
  { "results-threshold",  "required", 'T' },
  { "search-method",      "required", 'M' },
  { "language",           "required", 'L' },
  { "debug",              "none",     'D' },
  { "url",                "none",     'u' },
  { "image",              "none",     'i' },
  { "property",           "required",  'p' }}) do
  if o == '?' then
    printf("Invalid option or missing argument: %s", arg[opterr-1])
    return 1
  elseif o == 'h' then
    printf([[
Usage:
  %s OPTIONS
Options:
  -h, --help               Show this message and exit.
  -a, --aid                AID. Search for an anime by its anime ID
  -s, --search             TERM. Search in anime titles for TERM, and
                           print the result.
  -u, --url                Instead of anime information, print the URL
                           of its AniDB page.
  -i, --image              Instead of anime information, print the URL
                           to its AniDB cover image.
  -p, --pretty             Pretty-print a lot of useful information on
                           anime. This is the default.
  -W, --word-count         INT. Modifies --search. Require at least INT
                           sequential words in TERM to match.
  -T, --results-threshold  INT. If we do not find at least INT matches
                           using a token-based title search, commence an
                           expensive full text search.
  -M, --search-method      EXPR, where EXPR is one of 'startswith', 'endwith'
                           or 'count'. Method used for the full-text search.
  -L, --language           EXPR, where EXPR is an ISO language code ('ja', 'en').
                           Specifies the language titles are displayed in.
  -D, --debug              Print client library log messages.]], arg[0])
  os.exit(0)
  elseif o == 's' then
    table.insert(search_terms, optarg)
  elseif o == 'a' then
    table.insert(search_terms, tonumber(optarg))
  elseif o == 'W' then
    search_min_word_count = tonumber(optarg)
  elseif o == 'T' then
    search_fulltext_thresold = tonumber(optarg)
  elseif o == 'M' then
    search_fulltext_function = optarg
  elseif o == 'L' then
    pretty_language = optarg
  elseif o == 'D' then
    debug = true
  elseif o == 'u' then
    print_mode = "url"
  elseif o == 'i' then
    print_mode = "image"
  elseif o == 'p' then
    print_mode = "property"
    print_property = optarg
  end
end

if not anidb:init() then
  printf("Failed to initialize the client library! Try running with --debug.")
  os.exit(1)
end

anidb._DEBUG = debug

for _,term in ipairs(search_terms) do
  local i = true
  if type(term) == "number" then
    i = { term }
  else
    i = anidb:search(term, search_min_word_count, search_fulltext_thresold, search_fulltext_function)
  end
  if not i then
    printf("No match for search term: %s", term)
  else
    log("Matches: %d", #i)
    for _,aid in ipairs(i) do
      log("Calling info() on aid %d", aid)
      local a = anidb:info(aid)
      if print_mode == "pretty" then
        anidb:pretty(a, pretty_language)
      elseif print_mode == "property" then
        print(anidb:property(a, print_property))
      end
      if debug then
        anidb:debug_dump(a)
      end
    end
  end
end

anidb:exit()

os.exit(0)
